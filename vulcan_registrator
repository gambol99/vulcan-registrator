#!/usr/bin/env ruby
#
#   Author: Rohith
#   Date: 2014-10-10 20:53:36 +0100 (Fri, 10 Oct 2014)
#
#  vim:ts=2:sw=2:et
#
$:.unshift File.join(File.dirname(__FILE__),'.','.')
require 'optionscrapper'
require 'lib/logging'
require 'lib/utils'
require 'lib/docker'
require 'lib/vulcand'
require 'thread'

module Vulcand
  class Registration
    include Logging
    include Utils

    attr_reader :api

    def initialize
      begin
        # step: parser the command line options
        parser.parse!
        # step: call the registration
        registration
      rescue SystemExit => e
        exit e.status
      rescue Exception => e
        parser.usage e.message
      end
    end

    def parser
      @parser ||= OptionScrapper.new do |o|
        o.on( '-H HOST', '--host HOST', "the hostname / address of etcd host when is being used for vulcand config" ) { |x| options[:host] = x }
        o.on( '-p PORT', '--port PORT', "the port which etcd is running on (defaults to #{options[:port]}) ") { |x| options[:port] = x.to_i }
        o.on( '-s SOCKET', '--socker SOCKET', "the path to the docker socket (defaults to #{options[:docker]})" ) { |x| options[:docker] = x }
        o.on( '-P PREFIX', '--prefix PREFIX', "the prefix for vulcand services (defaults to #{options[:prefix]})" ) { |x|  options[:prefix] = x }
        o.on( '-i IPADDRESS', '--ipaddress IPADDRESS', "the ip address to register the services with" ) { |x| options[:ipaddress] = x }
        o.on( '-A', '--permit-frontend', "by default we dont any changed to frontend, this override" ) { options[:allow_frontend] = true }
        o.on( '--dry-run', 'perform a dry run, i.e. do not change anything' ) { |x| options[:dry_run] = true }
        o.on( '-v', '--verbose', 'switch on verbose logging mode' ) { options[:verbose] = true }
      end
    end

    def default_options
      {
        :dry_run        => false,
        :host           => ENV['ETCD'] || '127.0.0.1',
        :ipaddress      => ENV['IPADDRESS'],
        :port           => ENV['ETCD_PORT'] || 4001,
        :socket         => ENV['SOCKET'] || '/var/run/docker.sock',
        :verbose        => false,
        :allow_frontend => false,
        :prefix         => 'VS',
      }
    end

    def registration
      annonce "starting the vulcand registration service"
      # step: validate the options
      validate_options
      # step: list the running containers and register service
      register_running_containers
      # step: we build a list of advertized services and remove anything
      # we are NOT presently running - essentially we are cleaning up dead services

      # step: we can now move into the docker events
      register_docker_events
    end

    private
    def options
      @options ||= default_options
    end

    def validate_options
      # check: we docker socket and its readable
      Utils::validate_socket options[:socket]
      # check: we valid the etcd url
      Utils::validate_ipaddress options[:host]
      # check: check we have a valid ip address to register services
      Utils::validate_ipaddress options[:ipaddress]
      # step: set the docker socket
      Docker::set_socket(options[:socket])
    end

    def api
      @api ||= API::new(options)
    end

    def register_running_containers
      annonce "checking for running containers and any services requiring registration"
      Docker::containers do |containerId|
        register_services(containerId)
      end
    end

    def register_docker_events
      annonce "entering into docker events"
      # step: we listen out for docker events - start and die
      Docker::events do |id,status|
        # step: process the event with in thread
        Thread.new do
          begin
            verbose "event: #{status}, container id: #{cid(id)}"
            # step: we only care about start and die
            case status
              when "start"
                verbose "container: #{cid(id)} has started"
                # step: we inspect the container and look for any registration request
                register_services(id)
              when "die"
                verbose "container: #{cid(id)} has died"
                unregister_services(id)
            end
          rescue Exception => e
            error "failed to process event: [#{status},#{cid(id)}], error: #{e.message}"
          end
        end
      end
    end

    def register_services id
      annonce "processing startup container: #{cid(id)}"
      begin
        vulcan_services id do |services|
          annonce "found services in container: #{cid(id)}"
          # step: we add the services to the registered list
          registered[id] = services

          # step: we iterate the environment variable and search for registration requests
          services[:backend].each do |service|
            api.add_server(service)
          end

          if options[:allow_frontend]
            services[:frontend].each do |service|
              api.add_frontend(service)
            end
          end
        end
      rescue Exception => e
        puts e.backtrace
        error "failed service registration for container: #{cid(id)}, error: #{e.message}"
      end
    end

    def unregister_services id
      annonce "processing death of container: #{cid(id)}"
      # step: we check if the container registered any services and remove them
      if registered[id]
        annonce "container: #{cid(id)} contained services, removing them"
        services = registered[id]
        # step: we iterate the environment variable and search for registration requests
        services[:backend].each do |service|
          api.remove_server(service)
        end
      end
    end

    # probe the container and looking for service registration headers
    def vulcan_services id
      verbose "searching for vulcan services in container: #{cid(id)}"

      # step: we inspect the container and get the environment
      container      = Docker::get(id)
      container_name = Docker::hostname(container)
      address        = Docker::ipaddress(container)
      environment    = Docker::environment(container)
      exposed_ports  = Docker::ports(container)

      # step: validate we have an ipaddress for this container
      unless address
        annonce "container: #{cid(id)} has not ip address, skipping"
        return
      end

      # step: if we have no exposed port we can ignore
      if exposed_ports.empty?
        annonce "container: #{cid(id)} has zero exposed services"
        return
      end

      # step: we extract any potential services from
      services = {
        :backend => [],
        :frontend => []
      }

      found_services = false
      environment.each_pair do |key,value|
        # step: we look for vulcan backend
        if key =~ /^#{options[:prefix]}_([0-9]{1,5})_BACKEND_ID$/
          # service[port] => service{}
          annonce "found backend service: #{value}:#{$1} in container: #{cid(id)}"
          service_port = $1
          service_name = value

          # step: we have to check the port defined is being exposed by the container
          unless exposed_ports[service_port]
            error "error in container config, the backend: #{service_name} states port #{service_port}, but port is not exposed"
            # step: move along
            next
          end

          # step: create a backend deinition from it
          services[:backend] << {
            :id      => service_name,
            :address => options[:ipaddress],
            :port    => exposed_ports[service_port],
            :name    => "#{options[:ipaddress]}_#{container_name}",
          }
          found_services = true

        elsif key =~ /^#{options[:prefix]}_FRONTEND_(.*)$/
          verbose "found backend service: #{value}:#{$1} in container: #{cid(id)}}"
          found_services = true
        end
      end

      # step: we yield the services if we found anything
      yield services if found_services and block_given?
    end

    def registered
      @registered ||= {}
    end

    def cid containerId
      Docker::cid(containerId)
    end
  end
end

Vulcand::Registration.new
